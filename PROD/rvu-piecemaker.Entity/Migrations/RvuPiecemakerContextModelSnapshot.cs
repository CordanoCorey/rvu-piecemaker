// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RvuPiecemaker.Entities.Context;

namespace RvuPiecemaker.Entity.Migrations
{
    [DbContext(typeof(RvuPiecemakerContext))]
    partial class RvuPiecemakerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim","Auth");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim","Auth");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.Property<string>("ProviderKey");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<int>("UserId");

                    b.HasKey("ProviderKey", "LoginProvider");

                    b.HasAlternateKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin","Auth");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.Property<int>("RoleId");

                    b.Property<int>("UserId");

                    b.HasKey("RoleId", "UserId");

                    b.HasAlternateKey("UserId", "RoleId");

                    b.ToTable("UserRole","Auth");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<string>("Value");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("UserId", "Value", "LoginProvider");

                    b.HasAlternateKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserToken","Auth");
                });

            modelBuilder.Entity("RvuPiecemaker.Entities.DataClasses.ApplicationRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role","Auth");
                });

            modelBuilder.Entity("RvuPiecemaker.Entities.DataClasses.ApplicationUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<int?>("DoctorTypeId");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PasswordResetCode");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<decimal?>("RvuRate");

                    b.Property<string>("SecurityStamp");

                    b.Property<int?>("ShiftTypeId");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.Property<int?>("YearTypeId");

                    b.HasKey("Id");

                    b.HasIndex("DoctorTypeId");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ShiftTypeId");

                    b.HasIndex("YearTypeId");

                    b.ToTable("User","Auth");

                    b.HasData(
                        new { Id = 1, AccessFailedCount = 0, ConcurrencyStamp = "f605120f-716d-40c3-9dbd-8ff473410823", Email = "gelbaughcm@gmail.com", EmailConfirmed = false, FirstName = "System", LastName = "Administrator", LockoutEnabled = false, NormalizedEmail = "GELBAUGHCM@GMAIL.COM", NormalizedUserName = "GELBAUGHCM@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==", PhoneNumberConfirmed = false, RvuRate = 33.3m, SecurityStamp = "dfafd561-8cef-40ad-8c7a-339dc67529d0", ShiftTypeId = 1, TwoFactorEnabled = false, UserName = "gelbaughcm@gmail.com", YearTypeId = 1 },
                        new { Id = 2, AccessFailedCount = 0, ConcurrencyStamp = "b39b7fd6-391c-4d74-ae0c-14a75b78866d", DoctorTypeId = 1, Email = "dmartingrad@gmail.com", EmailConfirmed = false, FirstName = "Doug", LastName = "Martin", LockoutEnabled = false, NormalizedEmail = "DMARTINGRAD@GMAIL.COM", NormalizedUserName = "DMARTINGRAD@GMAIL.COM", PasswordHash = "AQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==", PhoneNumberConfirmed = false, SecurityStamp = "YSMHWI6B5ZHJFY4JDYXCHTUO52NXZWXB", ShiftTypeId = 1, TwoFactorEnabled = false, UserName = "dmartingrad@gmail.com", YearTypeId = 1 },
                        new { Id = 3, AccessFailedCount = 0, ConcurrencyStamp = "8162aab4-994a-4a36-b184-867c083484c3", DoctorTypeId = 1, Email = "pspotok@verizon.net", EmailConfirmed = false, FirstName = "Paul", LastName = "Potok", LockoutEnabled = false, NormalizedEmail = "PSPOTOK@VERIZON.NET", NormalizedUserName = "PSPOTOK@VERIZON.NET", PasswordHash = "AAQAAAAEAACcQAAAAELOBJuVxexUotv2KcwjrXvL1y7w0fqQDt0OZqrA9SBRw2KUWbDCzhlJPFU7Y7P+u7Q==", PhoneNumberConfirmed = false, SecurityStamp = "MKZ5DGRD44RCRJFUGZTIYTWZJ2IXSHUE", ShiftTypeId = 1, TwoFactorEnabled = false, UserName = "pspotok@verizon.net", YearTypeId = 1 }
                    );
                });

            modelBuilder.Entity("RvuPiecemaker.Entities.DataClasses.Calendar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool>("IsMaster")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValue(false);

                    b.Property<int>("LastModifiedById");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("Notes")
                        .HasMaxLength(250);

                    b.Property<int?>("ParentId");

                    b.Property<DateTime?>("StartDate");

                    b.Property<int?>("YearId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("ParentId");

                    b.HasIndex("YearId");

                    b.ToTable("Calendar","Common");
                });

            modelBuilder.Entity("RvuPiecemaker.Entities.DataClasses.CalendarEvent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CalendarEventTypeId");

                    b.Property<int?>("CalendarId");

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("LastModifiedById");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("CalendarEventTypeId");

                    b.HasIndex("CalendarId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("CalendarEvent","Common");
                });

            modelBuilder.Entity("RvuPiecemaker.Entities.DataClasses.CalendarEventType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("AllDayEvent");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Sort");

                    b.HasKey("Id");

                    b.ToTable("CalendarEventType","Lookup");
                });

            modelBuilder.Entity("RvuPiecemaker.Entities.DataClasses.DoctorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Sort");

                    b.HasKey("Id");

                    b.ToTable("DoctorType","Lookup");

                    b.HasData(
                        new { Id = 1, IsActive = true, Name = "Radiologist", Sort = 1 }
                    );
                });

            modelBuilder.Entity("RvuPiecemaker.Entities.DataClasses.Exam", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("EndTime");

                    b.Property<int>("ExamTypeId");

                    b.Property<int>("LastModifiedById");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Notes")
                        .HasMaxLength(200);

                    b.Property<decimal?>("RvuTotal");

                    b.Property<int>("ServiceId");

                    b.Property<int?>("ShiftId");

                    b.Property<DateTime>("StartTime");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ExamTypeId");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ShiftId");

                    b.HasIndex("UserId");

                    b.ToTable("Exam","Common");
                });

            modelBuilder.Entity("RvuPiecemaker.Entities.DataClasses.ExamGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<int>("LastModifiedById");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.ToTable("ExamGroup","Common");
                });

            modelBuilder.Entity("RvuPiecemaker.Entities.DataClasses.ExamGroupXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExamGroupId");

                    b.Property<int>("ExamTypeId");

                    b.Property<int>("Order");

                    b.HasKey("Id");

                    b.HasIndex("ExamGroupId");

                    b.HasIndex("ExamTypeId");

                    b.ToTable("ExamGroup_xref","Common");
                });

            modelBuilder.Entity("RvuPiecemaker.Entities.DataClasses.ExamType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CptCode")
                        .HasMaxLength(20);

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<bool>("IsAdmin");

                    b.Property<int>("LastModifiedById");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<int>("ModalityId");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<decimal>("RvuTotal");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("ModalityId");

                    b.ToTable("ExamType","Common");

                    b.HasData(
                        new { Id = 1, CptCode = "71250", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CT Chest W/O", RvuTotal = 1.16m },
                        new { Id = 2, CptCode = "71260", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CT Chest W", RvuTotal = 1.24m },
                        new { Id = 3, CptCode = "70450", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CT Brain WO", RvuTotal = 0.85m },
                        new { Id = 4, CptCode = "70470", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CT Brain W/WO", RvuTotal = 1.27m },
                        new { Id = 5, CptCode = "70480", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CT Orbit/Sella WO", RvuTotal = 1.28m },
                        new { Id = 6, CptCode = "70486", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CT Maxillofacial WO", RvuTotal = 0.85m },
                        new { Id = 7, CptCode = "70487", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CT Maxillofacial W", RvuTotal = 1.13m },
                        new { Id = 8, CptCode = "70491", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CT Neck W", RvuTotal = 1.38m },
                        new { Id = 9, CptCode = "70496", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CTA Head W/WO", RvuTotal = 1.75m },
                        new { Id = 10, CptCode = "70498", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CTA Neck W/WO", RvuTotal = 1.75m },
                        new { Id = 11, CptCode = "71270", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CT Chest W/WO", RvuTotal = 1.38m },
                        new { Id = 12, CptCode = "71275", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CTA Chest W/WO", RvuTotal = 1.82m },
                        new { Id = 13, CptCode = "72125", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CT Cervical Spine WO", RvuTotal = 1.07m },
                        new { Id = 14, CptCode = "72125", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CT Cervical Spine W", RvuTotal = 1.22m },
                        new { Id = 15, CptCode = "72128", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CT Thoracic Spine WO", RvuTotal = 1.0m },
                        new { Id = 16, CptCode = "72129", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CT Thoracic Spine W", RvuTotal = 1.22m },
                        new { Id = 17, CptCode = "72131", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CT Lumbar Spine WO", RvuTotal = 1.0m },
                        new { Id = 18, CptCode = "72132", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CT Lumbar Spine W", RvuTotal = 1.22m },
                        new { Id = 19, CptCode = "721392", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CT Pelvis WO", RvuTotal = 1.09m },
                        new { Id = 20, CptCode = "72193", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CT Pelvis W", RvuTotal = 1.16m },
                        new { Id = 21, CptCode = "73200", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CT Upper Extremity WO", RvuTotal = 1.0m },
                        new { Id = 22, CptCode = "73206", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CTA Upper Extremity W/WO", RvuTotal = 1.81m },
                        new { Id = 23, CptCode = "73700", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CT Lower Extremity WO", RvuTotal = 1.0m },
                        new { Id = 24, CptCode = "73701", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CT Lower Extremity W", RvuTotal = 1.16m },
                        new { Id = 25, CptCode = "73706", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CT Lower Extremity W/WO", RvuTotal = 1.9m },
                        new { Id = 26, CptCode = "74150", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CT Abdomen WO", RvuTotal = 1.19m },
                        new { Id = 27, CptCode = "74160", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CT Abdomen W", RvuTotal = 1.27m },
                        new { Id = 28, CptCode = "74170", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CT Abdomen W/WO", RvuTotal = 1.40m },
                        new { Id = 29, CptCode = "74174", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CTA Abdomen/Pelvis W/WO", RvuTotal = 2.20m },
                        new { Id = 30, CptCode = "74175", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CTA Abdomen W/WO", RvuTotal = 1.82m },
                        new { Id = 31, CptCode = "74146", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CT Abdomen/Pelvis WO", RvuTotal = 1.74m },
                        new { Id = 32, CptCode = "74177", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CT Abdomen/Pelvis W", RvuTotal = 1.82m },
                        new { Id = 33, CptCode = "74178", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CT Abdomen/Pelvis W/WO", RvuTotal = 2.01m },
                        new { Id = 34, CptCode = "71046", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 1, Name = "CR", RvuTotal = 10.18m },
                        new { Id = 35, CptCode = "70540", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 4, Name = "MRI Neck/Face WO", RvuTotal = 1.35m },
                        new { Id = 36, CptCode = "70544", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "MRA Head WO", RvuTotal = 1.2m },
                        new { Id = 37, CptCode = "70547", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 4, Name = "MRA Neck WO", RvuTotal = 1.20m },
                        new { Id = 38, CptCode = "70549", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 4, Name = "MRA Neck W/WO", RvuTotal = 1.80m },
                        new { Id = 39, CptCode = "70551", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 4, Name = "MRI Brain WO", RvuTotal = 1.48m },
                        new { Id = 40, CptCode = "70553", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 4, Name = "MRI Brain W/WO", RvuTotal = 2.29m },
                        new { Id = 41, CptCode = "70552", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 4, Name = "MRI Brain W", RvuTotal = 1.78m },
                        new { Id = 42, CptCode = "71552", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 4, Name = "MRI Chest W/WO", RvuTotal = 2.26m },
                        new { Id = 43, CptCode = "72141", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 4, Name = "RI Cervical Spine WO", RvuTotal = 1.48m },
                        new { Id = 44, CptCode = "72146", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 4, Name = "MRI Thoracic Spine WO", RvuTotal = 1.48m },
                        new { Id = 45, CptCode = "72148", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 4, Name = "MRI Lumbar Spine WO", RvuTotal = 1.48m },
                        new { Id = 46, CptCode = "72156", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 4, Name = "MRI Cervical Spine W/WO", RvuTotal = 2.29m },
                        new { Id = 47, CptCode = "72157", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 4, Name = "MRI Thoracic Spine W/WO", RvuTotal = 2.29m },
                        new { Id = 48, CptCode = "72158", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 4, Name = "MRI Lumbar Spine W/WO", RvuTotal = 2.29m },
                        new { Id = 49, CptCode = "72195", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 4, Name = "MRI Pelvis WO", RvuTotal = 1.46m },
                        new { Id = 50, CptCode = "72197", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 4, Name = "MRI Pelvis W/WO", RvuTotal = 2.20m },
                        new { Id = 51, CptCode = "74181", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 4, Name = "MRI Abdomen WO", RvuTotal = 1.46m },
                        new { Id = 52, CptCode = "74183", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 4, Name = "MRI Abdomen W/WO", RvuTotal = 2.20m },
                        new { Id = 53, CptCode = "73718", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 4, Name = "MRI Lower Extremity WO", RvuTotal = 1.35m },
                        new { Id = 54, CptCode = "73720", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 4, Name = "MRI Lower Extremity W/WO", RvuTotal = 2.15m },
                        new { Id = 55, CptCode = "73721", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 4, Name = "MRI Lower Extremity Joint WO", RvuTotal = 1.35m },
                        new { Id = 56, CptCode = "76642", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 6, Name = "US Breast UNI Limited", RvuTotal = 0.74m },
                        new { Id = 57, CptCode = "76705", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 6, Name = "US Abdomen Limited", RvuTotal = 0.59m },
                        new { Id = 58, CptCode = "776770", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 6, Name = "US Retroperitoneal Complete", RvuTotal = 0.74m },
                        new { Id = 59, CptCode = "76775", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 6, Name = "US Retroperitoneal Limited", RvuTotal = 0.58m },
                        new { Id = 60, CptCode = "76706", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 6, Name = "US Aorta Screen Limited", RvuTotal = 0.55m },
                        new { Id = 61, CptCode = "76870", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 6, Name = "US Scrotum", RvuTotal = 0.64m },
                        new { Id = 62, CptCode = "76857", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 6, Name = "US Pelvis Limited", RvuTotal = 0.5m },
                        new { Id = 63, CptCode = "93970", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 6, Name = "US Extremity Venous Bilateral", RvuTotal = 0.70m },
                        new { Id = 64, CptCode = "93971", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 6, Name = "US Extremity Venous Unilateral", RvuTotal = 0.45m },
                        new { Id = 65, CptCode = "793975", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 6, Name = "US Duplex Abd/Pel Complete", RvuTotal = 1.16m },
                        new { Id = 66, CptCode = "G0297", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CT Chest Low Dose Screen", RvuTotal = 1.02m },
                        new { Id = 67, CptCode = "76801", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 6, Name = "US OB <14 Weeks, Single Fetus", RvuTotal = 0.99m },
                        new { Id = 68, CptCode = "70490", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CT Neck WO", RvuTotal = 1.28m },
                        new { Id = 69, CptCode = "77067", CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 3, Name = "Screening Mammogram 2D CAD", RvuTotal = 0.76m },
                        new { Id = 70, CptCode = "70543", CreatedById = 1, CreatedDate = new DateTime(2019, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 4, Name = "MRI Face W/WO", RvuTotal = 2.15m },
                        new { Id = 71, CptCode = "72133", CreatedById = 1, CreatedDate = new DateTime(2019, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CT Lumbar spine W/WO", RvuTotal = 1.27m },
                        new { Id = 72, CptCode = "76377", CreatedById = 1, CreatedDate = new DateTime(2019, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "3D Rendering add-on", RvuTotal = 0.76m },
                        new { Id = 73, CptCode = "77063+77067", CreatedById = 1, CreatedDate = new DateTime(2019, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 3, Name = "Screening Breast Tomo", RvuTotal = 1.36m },
                        new { Id = 74, CptCode = "77067", CreatedById = 1, CreatedDate = new DateTime(2019, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 3, Name = "Screening Mammogram 2D", RvuTotal = 0.76m },
                        new { Id = 75, CptCode = "G0279+77065", CreatedById = 1, CreatedDate = new DateTime(2019, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 3, Name = "Dx Breast Tomo UNI", RvuTotal = 1.41m },
                        new { Id = 76, CptCode = "G0279+77066", CreatedById = 1, CreatedDate = new DateTime(2019, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 3, Name = "Dx Breast Tomo BIL", RvuTotal = 1.6m },
                        new { Id = 77, CptCode = "77066", CreatedById = 1, CreatedDate = new DateTime(2019, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 3, Name = "Dx 2D Mammogram BIL", RvuTotal = 1.0m },
                        new { Id = 78, CptCode = "77065", CreatedById = 1, CreatedDate = new DateTime(2019, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 3, Name = "Dx 2D Mammogram UNI", RvuTotal = 0.81m },
                        new { Id = 79, CptCode = "75635", CreatedById = 1, CreatedDate = new DateTime(2019, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CTA AortoBifem W/WO", RvuTotal = 2.4m },
                        new { Id = 80, CptCode = "70488", CreatedById = 1, CreatedDate = new DateTime(2019, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 2, Name = "CT Face W/WO", RvuTotal = 1.27m },
                        new { Id = 81, CptCode = "76830", CreatedById = 1, CreatedDate = new DateTime(2019, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 6, Name = "US Pelvis TV", RvuTotal = 0.69m },
                        new { Id = 82, CptCode = "76700", CreatedById = 1, CreatedDate = new DateTime(2019, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 6, Name = "US Abdomen Complete", RvuTotal = 0.81m },
                        new { Id = 83, CptCode = "76856", CreatedById = 1, CreatedDate = new DateTime(2019, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", IsAdmin = true, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 10, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), ModalityId = 6, Name = "US Pelvis TA", RvuTotal = 0.69m }
                    );
                });

            modelBuilder.Entity("RvuPiecemaker.Entities.DataClasses.Goal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<decimal>("DollarAmount");

                    b.Property<int>("LastModifiedById");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<int>("UserId");

                    b.Property<int>("YearId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("UserId");

                    b.HasIndex("YearId");

                    b.ToTable("Goal","Common");

                    b.HasData(
                        new { Id = 1, CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), DollarAmount = 100000m, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), UserId = 1, YearId = 1 },
                        new { Id = 2, CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), DollarAmount = 100000m, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), UserId = 2, YearId = 1 },
                        new { Id = 3, CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), DollarAmount = 100000m, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), UserId = 3, YearId = 1 }
                    );
                });

            modelBuilder.Entity("RvuPiecemaker.Entities.DataClasses.Modality", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Sort");

                    b.HasKey("Id");

                    b.ToTable("Modality","Lookup");

                    b.HasData(
                        new { Id = 1, IsActive = true, Name = "CR", Sort = 1 },
                        new { Id = 2, IsActive = true, Name = "CT", Sort = 2 },
                        new { Id = 3, IsActive = true, Name = "MG", Sort = 3 },
                        new { Id = 4, IsActive = true, Name = "MR", Sort = 4 },
                        new { Id = 5, IsActive = true, Name = "NM", Sort = 5 },
                        new { Id = 6, IsActive = true, Name = "US", Sort = 6 },
                        new { Id = 7, IsActive = true, Name = "OT", Sort = 7 },
                        new { Id = 8, IsActive = true, Name = "PT", Sort = 8 }
                    );
                });

            modelBuilder.Entity("RvuPiecemaker.Entities.DataClasses.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<int>("DoctorTypeId");

                    b.Property<int>("LastModifiedById");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int?>("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DoctorTypeId");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("ParentId");

                    b.ToTable("Service","Common");

                    b.HasData(
                        new { Id = 1, CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", DoctorTypeId = 1, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "1-9PM" },
                        new { Id = 2, CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", DoctorTypeId = 1, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "3-11PM" },
                        new { Id = 3, CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", DoctorTypeId = 1, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "BI (AM)" },
                        new { Id = 4, CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", DoctorTypeId = 1, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "BI (PM)" },
                        new { Id = 5, CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", DoctorTypeId = 1, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "BI 3 (PM)" },
                        new { Id = 6, CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", DoctorTypeId = 1, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "BODY CT WL 1 (AM)" },
                        new { Id = 7, CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", DoctorTypeId = 1, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "BODY CT WL 1 (PM)" },
                        new { Id = 8, CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", DoctorTypeId = 1, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "DOB (AM)" },
                        new { Id = 9, CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", DoctorTypeId = 1, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "ED/TRAUMA (AM)" },
                        new { Id = 10, CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", DoctorTypeId = 1, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "GENERAL (AM)" },
                        new { Id = 11, CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", DoctorTypeId = 1, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "GENERAL (PM)" },
                        new { Id = 12, CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", DoctorTypeId = 1, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "MAMMO 1 (AM)" },
                        new { Id = 13, CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", DoctorTypeId = 1, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "MAMMO 1 (PM)" },
                        new { Id = 14, CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", DoctorTypeId = 1, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "MAMMO 2 (AM)" },
                        new { Id = 15, CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", DoctorTypeId = 1, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "MAMMO 2 (PM)" },
                        new { Id = 16, CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", DoctorTypeId = 1, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "MAMMO 3 (AM)" },
                        new { Id = 17, CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", DoctorTypeId = 1, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "NEURO 4 (AM)" },
                        new { Id = 18, CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", DoctorTypeId = 1, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "NEURO ACUTE (AM)" },
                        new { Id = 19, CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", DoctorTypeId = 1, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "NEURO ACUTE (PM)" },
                        new { Id = 20, CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", DoctorTypeId = 1, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "NEURO NH/INPT (PM)" },
                        new { Id = 21, CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", DoctorTypeId = 1, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "NEURO NON ACUTE (PM)" },
                        new { Id = 22, CreatedById = 1, CreatedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Description = "", DoctorTypeId = 1, LastModifiedById = 1, LastModifiedDate = new DateTime(2019, 9, 22, 0, 0, 0, 0, DateTimeKind.Unspecified), Name = "DOB (PM)" }
                    );
                });

            modelBuilder.Entity("RvuPiecemaker.Entities.DataClasses.ServiceExamTypeXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ExamTypeId");

                    b.Property<int>("ServiceId");

                    b.HasKey("Id");

                    b.HasIndex("ExamTypeId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceExamType_xref","Common");
                });

            modelBuilder.Entity("RvuPiecemaker.Entities.DataClasses.Shift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CreatedById");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<DateTime?>("EndTime");

                    b.Property<int>("LastModifiedById");

                    b.Property<DateTime>("LastModifiedDate");

                    b.Property<decimal?>("RvuRate");

                    b.Property<decimal?>("RvuTotal");

                    b.Property<int>("ShiftTypeId");

                    b.Property<DateTime?>("StartTime");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LastModifiedById");

                    b.HasIndex("ShiftTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("Shift","Common");
                });

            modelBuilder.Entity("RvuPiecemaker.Entities.DataClasses.ShiftServiceXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DurationMinutes");

                    b.Property<DateTime?>("EndTime");

                    b.Property<int>("ServiceId");

                    b.Property<int>("ShiftId");

                    b.Property<DateTime?>("StartTime");

                    b.HasKey("Id");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ShiftId");

                    b.ToTable("ShiftService_xref","Common");
                });

            modelBuilder.Entity("RvuPiecemaker.Entities.DataClasses.ShiftType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<int>("EndHour");

                    b.Property<int>("EndMinute");

                    b.Property<bool>("IsAdmin");

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<int>("StartHour");

                    b.Property<int>("StartMinute");

                    b.HasKey("Id");

                    b.ToTable("ShiftType","Common");

                    b.HasData(
                        new { Id = 1, Description = "Default Radiology Hours", EndHour = 16, EndMinute = 45, IsAdmin = true, Name = "Default Day", StartHour = 7, StartMinute = 30 },
                        new { Id = 2, Description = "", EndHour = 21, EndMinute = 0, IsAdmin = true, Name = "1-9PM", StartHour = 13, StartMinute = 0 },
                        new { Id = 3, Description = "", EndHour = 23, EndMinute = 0, IsAdmin = true, Name = "3-11PM", StartHour = 15, StartMinute = 0 }
                    );
                });

            modelBuilder.Entity("RvuPiecemaker.Entities.DataClasses.UserShiftTypeXref", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ShiftTypeId");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ShiftTypeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserShiftType_xref","Common");

                    b.HasData(
                        new { Id = 1, ShiftTypeId = 1, UserId = 1 },
                        new { Id = 2, ShiftTypeId = 1, UserId = 2 },
                        new { Id = 3, ShiftTypeId = 1, UserId = 3 },
                        new { Id = 4, ShiftTypeId = 2, UserId = 1 },
                        new { Id = 5, ShiftTypeId = 2, UserId = 2 },
                        new { Id = 6, ShiftTypeId = 2, UserId = 3 },
                        new { Id = 7, ShiftTypeId = 3, UserId = 1 },
                        new { Id = 8, ShiftTypeId = 3, UserId = 2 },
                        new { Id = 9, ShiftTypeId = 3, UserId = 3 }
                    );
                });

            modelBuilder.Entity("RvuPiecemaker.Entities.DataClasses.Year", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Sort");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("YearTypeId");

                    b.HasKey("Id");

                    b.HasIndex("YearTypeId");

                    b.ToTable("Year","Lookup");

                    b.HasData(
                        new { Id = 1, EndDate = new DateTime(2019, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, Name = "2019", Sort = 1, StartDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), YearTypeId = 1 },
                        new { Id = 2, EndDate = new DateTime(2020, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified), IsActive = true, Name = "2020", Sort = 2, StartDate = new DateTime(2020, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), YearTypeId = 1 }
                    );
                });

            modelBuilder.Entity("RvuPiecemaker.Entities.DataClasses.YearType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<int>("Sort");

                    b.HasKey("Id");

                    b.ToTable("YearType","Lookup");

                    b.HasData(
                        new { Id = 1, IsActive = true, Name = "Calendar Year", Sort = 1 },
                        new { Id = 2, IsActive = true, Name = "Fiscal Year", Sort = 2 },
                        new { Id = 3, IsActive = true, Name = "School Year", Sort = 3 }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<int>", b =>
                {
                    b.HasOne("RvuPiecemaker.Entities.DataClasses.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<int>", b =>
                {
                    b.HasOne("RvuPiecemaker.Entities.DataClasses.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<int>", b =>
                {
                    b.HasOne("RvuPiecemaker.Entities.DataClasses.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<int>", b =>
                {
                    b.HasOne("RvuPiecemaker.Entities.DataClasses.ApplicationRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RvuPiecemaker.Entities.DataClasses.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<int>", b =>
                {
                    b.HasOne("RvuPiecemaker.Entities.DataClasses.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RvuPiecemaker.Entities.DataClasses.ApplicationUser", b =>
                {
                    b.HasOne("RvuPiecemaker.Entities.DataClasses.DoctorType", "DoctorType")
                        .WithMany("Users")
                        .HasForeignKey("DoctorTypeId")
                        .HasConstraintName("FK_ApplicationUser_DoctorType");

                    b.HasOne("RvuPiecemaker.Entities.DataClasses.ShiftType", "ShiftType")
                        .WithMany("Users")
                        .HasForeignKey("ShiftTypeId")
                        .HasConstraintName("FK_ApplicationUser_ShiftType");

                    b.HasOne("RvuPiecemaker.Entities.DataClasses.YearType", "YearType")
                        .WithMany("Users")
                        .HasForeignKey("YearTypeId")
                        .HasConstraintName("FK_ApplicationUser_YearType");
                });

            modelBuilder.Entity("RvuPiecemaker.Entities.DataClasses.Calendar", b =>
                {
                    b.HasOne("RvuPiecemaker.Entities.DataClasses.ApplicationUser", "CreatedBy")
                        .WithMany("CalendarCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_Calendar_CreatedByUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RvuPiecemaker.Entities.DataClasses.ApplicationUser", "LastModifiedBy")
                        .WithMany("CalendarLastModifiedBy")
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("FK_Calendar_LastModifiedByUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RvuPiecemaker.Entities.DataClasses.Calendar", "Parent")
                        .WithMany("Calendars")
                        .HasForeignKey("ParentId");

                    b.HasOne("RvuPiecemaker.Entities.DataClasses.Year", "Year")
                        .WithMany("Calendars")
                        .HasForeignKey("YearId");
                });

            modelBuilder.Entity("RvuPiecemaker.Entities.DataClasses.CalendarEvent", b =>
                {
                    b.HasOne("RvuPiecemaker.Entities.DataClasses.CalendarEventType", "CalendarEventType")
                        .WithMany("CalendarEvents")
                        .HasForeignKey("CalendarEventTypeId")
                        .HasConstraintName("FK_CalendarEvent_CalendarEventType")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RvuPiecemaker.Entities.DataClasses.Calendar", "Calendar")
                        .WithMany("CalendarEvents")
                        .HasForeignKey("CalendarId")
                        .HasConstraintName("FK_CalendarEvent_Calendar")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RvuPiecemaker.Entities.DataClasses.ApplicationUser", "CreatedBy")
                        .WithMany("CalendarEventCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_CalendarEvent_CreatedByUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RvuPiecemaker.Entities.DataClasses.ApplicationUser", "LastModifiedBy")
                        .WithMany("CalendarEventLastModifiedBy")
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("FK_CalendarEvent_LastModifiedByUser")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RvuPiecemaker.Entities.DataClasses.Exam", b =>
                {
                    b.HasOne("RvuPiecemaker.Entities.DataClasses.ApplicationUser", "CreatedBy")
                        .WithMany("ExamCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_Exam_CreatedByUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RvuPiecemaker.Entities.DataClasses.ExamType", "ExamType")
                        .WithMany("Exams")
                        .HasForeignKey("ExamTypeId")
                        .HasConstraintName("FK_Exam_ExamType")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RvuPiecemaker.Entities.DataClasses.ApplicationUser", "LastModifiedBy")
                        .WithMany("ExamLastModifiedBy")
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("FK_Exam_LastModifiedByUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RvuPiecemaker.Entities.DataClasses.Service", "Service")
                        .WithMany("Exams")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_Exam_Service")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RvuPiecemaker.Entities.DataClasses.Shift", "Shift")
                        .WithMany("Exams")
                        .HasForeignKey("ShiftId")
                        .HasConstraintName("FK_Exam_Shift");

                    b.HasOne("RvuPiecemaker.Entities.DataClasses.ApplicationUser", "User")
                        .WithMany("ExamUser")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Exam_User");
                });

            modelBuilder.Entity("RvuPiecemaker.Entities.DataClasses.ExamGroup", b =>
                {
                    b.HasOne("RvuPiecemaker.Entities.DataClasses.ApplicationUser", "CreatedBy")
                        .WithMany("ExamGroupCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_ExamGroup_CreatedByUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RvuPiecemaker.Entities.DataClasses.ApplicationUser", "LastModifiedBy")
                        .WithMany("ExamGroupLastModifiedBy")
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("FK_ExamGroup_LastModifiedByUser")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("RvuPiecemaker.Entities.DataClasses.ExamGroupXref", b =>
                {
                    b.HasOne("RvuPiecemaker.Entities.DataClasses.ExamGroup", "ExamGroup")
                        .WithMany("ExamGroupXref")
                        .HasForeignKey("ExamGroupId")
                        .HasConstraintName("FK_ExamGroup_xref_ExamGroup")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RvuPiecemaker.Entities.DataClasses.ExamType", "ExamType")
                        .WithMany("ExamGroupXref")
                        .HasForeignKey("ExamTypeId")
                        .HasConstraintName("FK_ExamGroup_xref_ExamType")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RvuPiecemaker.Entities.DataClasses.ExamType", b =>
                {
                    b.HasOne("RvuPiecemaker.Entities.DataClasses.ApplicationUser", "CreatedBy")
                        .WithMany("ExamTypeCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_ExamType_CreatedByUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RvuPiecemaker.Entities.DataClasses.ApplicationUser", "LastModifiedBy")
                        .WithMany("ExamTypeLastModifiedBy")
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("FK_ExamType_LastModifiedByUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RvuPiecemaker.Entities.DataClasses.Modality", "Modality")
                        .WithMany("ExamTypes")
                        .HasForeignKey("ModalityId")
                        .HasConstraintName("FK_ExamType_Modality")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RvuPiecemaker.Entities.DataClasses.Goal", b =>
                {
                    b.HasOne("RvuPiecemaker.Entities.DataClasses.ApplicationUser", "CreatedBy")
                        .WithMany("GoalCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_Goal_CreatedByUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RvuPiecemaker.Entities.DataClasses.ApplicationUser", "LastModifiedBy")
                        .WithMany("GoalLastModifiedBy")
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("FK_Goal_LastModifiedByUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RvuPiecemaker.Entities.DataClasses.ApplicationUser", "User")
                        .WithMany("UserGoals")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Goal_User")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RvuPiecemaker.Entities.DataClasses.Year", "Year")
                        .WithMany()
                        .HasForeignKey("YearId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RvuPiecemaker.Entities.DataClasses.Service", b =>
                {
                    b.HasOne("RvuPiecemaker.Entities.DataClasses.ApplicationUser", "CreatedBy")
                        .WithMany("ServiceCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_Service_CreatedByUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RvuPiecemaker.Entities.DataClasses.DoctorType", "DoctorType")
                        .WithMany("Services")
                        .HasForeignKey("DoctorTypeId")
                        .HasConstraintName("FK_Service_DoctorType")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RvuPiecemaker.Entities.DataClasses.ApplicationUser", "LastModifiedBy")
                        .WithMany("ServiceLastModifiedBy")
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("FK_Service_LastModifiedByUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RvuPiecemaker.Entities.DataClasses.Service", "Parent")
                        .WithMany("Services")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("RvuPiecemaker.Entities.DataClasses.ServiceExamTypeXref", b =>
                {
                    b.HasOne("RvuPiecemaker.Entities.DataClasses.ExamType", "ExamType")
                        .WithMany("ExamTypeServices")
                        .HasForeignKey("ExamTypeId")
                        .HasConstraintName("FK_ServiceExamType_xref_ExamType")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RvuPiecemaker.Entities.DataClasses.Service", "Service")
                        .WithMany("ServiceExamTypes")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_ServiceExamType_xref_Service")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RvuPiecemaker.Entities.DataClasses.Shift", b =>
                {
                    b.HasOne("RvuPiecemaker.Entities.DataClasses.ApplicationUser", "CreatedBy")
                        .WithMany("ShiftCreatedBy")
                        .HasForeignKey("CreatedById")
                        .HasConstraintName("FK_Shift_CreatedByUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RvuPiecemaker.Entities.DataClasses.ApplicationUser", "LastModifiedBy")
                        .WithMany("ShiftLastModifiedBy")
                        .HasForeignKey("LastModifiedById")
                        .HasConstraintName("FK_Shift_LastModifiedByUser")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("RvuPiecemaker.Entities.DataClasses.ShiftType", "ShiftType")
                        .WithMany("Shifts")
                        .HasForeignKey("ShiftTypeId")
                        .HasConstraintName("FK_Shift_ShiftType")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RvuPiecemaker.Entities.DataClasses.ApplicationUser", "User")
                        .WithMany("UserShifts")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Shift_User")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RvuPiecemaker.Entities.DataClasses.ShiftServiceXref", b =>
                {
                    b.HasOne("RvuPiecemaker.Entities.DataClasses.Service", "Service")
                        .WithMany("ServiceShifts")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_ShiftService_xref_Service")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RvuPiecemaker.Entities.DataClasses.Shift", "Shift")
                        .WithMany("ShiftServices")
                        .HasForeignKey("ShiftId")
                        .HasConstraintName("FK_ShiftService_xref_Shift")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RvuPiecemaker.Entities.DataClasses.UserShiftTypeXref", b =>
                {
                    b.HasOne("RvuPiecemaker.Entities.DataClasses.ShiftType", "ShiftType")
                        .WithMany("ShiftTypeUsers")
                        .HasForeignKey("ShiftTypeId")
                        .HasConstraintName("FK_UserShiftType_xref_ShiftType")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("RvuPiecemaker.Entities.DataClasses.ApplicationUser", "User")
                        .WithMany("UserShiftTypes")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserShiftType_xref_ApplicationUser")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("RvuPiecemaker.Entities.DataClasses.Year", b =>
                {
                    b.HasOne("RvuPiecemaker.Entities.DataClasses.YearType", "YearType")
                        .WithMany("Years")
                        .HasForeignKey("YearTypeId")
                        .HasConstraintName("FK_Year_YearType")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
